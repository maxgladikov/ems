version: '3.8'

services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: ems.zookeeper
    ports:
    - "2181:2181"
    networks:
      - backend
  
  kafka:
    image: wurstmeister/kafka
    container_name: ems.kafka
    ports:
    - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    networks:
      - backend
    depends_on:
      - zookeeper    

  elasticsearch:
    image: elasticsearch:8.3.3
    container_name: ems.elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
    networks:
      - backend

  logstash:
    image: logstash:8.3.3
    container_name: ems.logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./configurations/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./configurations/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    networks:
      - backend
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.3.3
    container_name: ems.kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - backend
    depends_on:
      - elasticsearch

  discovery-service:
    image: "aston/ems.discovery-service:latest"
    pull_policy: never
    container_name: ems.eureka
    ports:
      - '8000:8000'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "curl --fail --silent localhost:8000/actuator/health/readiness | grep UP || exit 1"
      interval: 2s
      timeout: 3s
      retries: 2
      start_period: 20s
    networks:
      - backend


  gateway:
    image: "aston/ems.gateway-service:latest"
    pull_policy: never
    container_name: ems.gateway
    ports:
      - '8080:8080'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 2s
      timeout: 3s
      retries: 2
      start_period: 20s
    networks:
      - backend
    depends_on:
      - discovery-service

  teacher-db:
    image: postgres:15.4
    #pull_policy: never
    container_name: ems.teacher-db
    restart: always
    environment:
      POSTGRES_DB: tasks
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: "Asia/Yekaterinburg"
      PGTZ: "Asia/Yekaterinburg"
    networks:
      - teacher
    ports:
      - '5002:5432'

  student-db:
    image: postgres:15.4
    #pull_policy: never
    container_name: ems.student-db
    restart: always
#   \studyAndWork\ems\localDB\postgres\data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: student
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      TZ: "Asia/Yekaterinburg"
      PGTZ: "Asia/Yekaterinburg"
    networks:
      - student
    ports:
      - '5001:5432'
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  admin-db:
    image: postgres:15.4
    #pull_policy: never
    container_name: ems.admin-db
    restart: always
    environment:
      POSTGRES_DB: 'ems'
      POSTGRES_USER: 'max'
      POSTGRES_PASSWORD: 'pas'
      TZ: "Asia/Yekaterinburg"
      PGTZ: "Asia/Yekaterinburg"
    networks:
      - admin
    ports:
      - '5432:5432'
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G


  admin-service:
    image: "aston/ems.admin-service:latest"
    pull_policy: never
    container_name: ems.admin-service
    ports:
      - '9000:9000'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 2s
      timeout: 3s
      retries: 2
      start_period: 20s
    volumes:
      - ems_logs:/app/logs
    networks:
      - backend
      - admin
    depends_on:
      - admin-db
      - discovery-service

  user-service:
    image: "aston/ems.user-service:latest"
    pull_policy: never
    container_name: ems.user_service
    ports:
      - '9003:9003'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ems_logs:/app/logs
    networks:
      - backend
      - user
      - student
    depends_on:
      - logstash
      - kafka
      - student-service
      - discovery-service


  student-service:
    image: "aston/ems.student-service:latest"
    pull_policy: never
    container_name: ems.student-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://student-db:5432/student
    ports:
      - '9001:9001'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ems_logs:/app/logs
    networks:
      - backend
      - student
    depends_on:
      - discovery-service
      - logstash
      - kafka
      - student-db

  teacher-service:
    image: "aston/ems.teacher-service:latest"
    pull_policy: never
    container_name: ems.teacher_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://teacher-db:5432/tasks
    ports:
      - '9002:9002'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ems_logs:/app/logs
    networks:
      - backend
      - teacher
    depends_on:
      - discovery-service
      - logstash
      - kafka
      - teacher-db


volumes:
  ems_logs:
     driver: local  
                     
networks:
  backend:
    driver: bridge
  admin:
    driver: bridge
  user:
    driver: bridge
  student:
    driver: bridge
  frontend:
    driver: bridge
  elk:
    driver: bridge
  teacher:
    driver: bridge
